/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VaultInterface extends utils.Interface {
  contractName: "Vault";
  functions: {
    "addUser(bytes32)": FunctionFragment;
    "count()": FunctionFragment;
    "data(uint256)": FunctionFragment;
    "getArrayLocation(uint256,uint256,uint256)": FunctionFragment;
    "getMapLocation(uint256,uint256)": FunctionFragment;
    "isTrue()": FunctionFragment;
    "owner()": FunctionFragment;
    "someConst()": FunctionFragment;
    "u16()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addUser", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(functionFragment: "data", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getArrayLocation",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMapLocation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isTrue", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "someConst", values?: undefined): string;
  encodeFunctionData(functionFragment: "u16", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArrayLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMapLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isTrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "someConst", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "u16", data: BytesLike): Result;

  events: {};
}

export interface Vault extends BaseContract {
  contractName: "Vault";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addUser(
      _password: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    data(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getArrayLocation(
      slot: BigNumberish,
      index: BigNumberish,
      elementSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMapLocation(
      slot: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isTrue(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    someConst(overrides?: CallOverrides): Promise<[BigNumber]>;

    u16(overrides?: CallOverrides): Promise<[number]>;
  };

  addUser(
    _password: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  data(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getArrayLocation(
    slot: BigNumberish,
    index: BigNumberish,
    elementSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMapLocation(
    slot: BigNumberish,
    key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isTrue(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  someConst(overrides?: CallOverrides): Promise<BigNumber>;

  u16(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    addUser(_password: BytesLike, overrides?: CallOverrides): Promise<void>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    data(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getArrayLocation(
      slot: BigNumberish,
      index: BigNumberish,
      elementSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMapLocation(
      slot: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrue(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    someConst(overrides?: CallOverrides): Promise<BigNumber>;

    u16(overrides?: CallOverrides): Promise<number>;
  };

  filters: {};

  estimateGas: {
    addUser(
      _password: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    data(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getArrayLocation(
      slot: BigNumberish,
      index: BigNumberish,
      elementSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMapLocation(
      slot: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    someConst(overrides?: CallOverrides): Promise<BigNumber>;

    u16(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addUser(
      _password: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    data(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getArrayLocation(
      slot: BigNumberish,
      index: BigNumberish,
      elementSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMapLocation(
      slot: BigNumberish,
      key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    someConst(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    u16(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
