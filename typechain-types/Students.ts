/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Students {
  export type StudentDataStruct = {
    class: BigNumberish;
    status: string;
    grade: BigNumberish;
  };

  export type StudentDataStructOutput = [BigNumber, string, BigNumber] & {
    class: BigNumber;
    status: string;
    grade: BigNumber;
  };
}

export interface StudentsInterface extends utils.Interface {
  contractName: "Students";
  functions: {
    "getOwner()": FunctionFragment;
    "getStudentData(address)": FunctionFragment;
    "register(address,uint256,string,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStudentData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "register",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStudentData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;

  events: {};
}

export interface Students extends BaseContract {
  contractName: "Students";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StudentsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getOwner(overrides?: CallOverrides): Promise<[string]>;

    getStudentData(
      _studentId: string,
      overrides?: CallOverrides
    ): Promise<
      [Students.StudentDataStructOutput] & {
        studentData: Students.StudentDataStructOutput;
      }
    >;

    register(
      _studentId: string,
      _class: BigNumberish,
      _status: string,
      _grade: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getOwner(overrides?: CallOverrides): Promise<string>;

  getStudentData(
    _studentId: string,
    overrides?: CallOverrides
  ): Promise<Students.StudentDataStructOutput>;

  register(
    _studentId: string,
    _class: BigNumberish,
    _status: string,
    _grade: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getOwner(overrides?: CallOverrides): Promise<string>;

    getStudentData(
      _studentId: string,
      overrides?: CallOverrides
    ): Promise<Students.StudentDataStructOutput>;

    register(
      _studentId: string,
      _class: BigNumberish,
      _status: string,
      _grade: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    getStudentData(
      _studentId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    register(
      _studentId: string,
      _class: BigNumberish,
      _status: string,
      _grade: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStudentData(
      _studentId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    register(
      _studentId: string,
      _class: BigNumberish,
      _status: string,
      _grade: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
