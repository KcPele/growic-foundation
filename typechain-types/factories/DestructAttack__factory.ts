/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  DestructAttack,
  DestructAttackInterface,
} from "../DestructAttack";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract EtherGame",
        name: "_etherGame",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161010038038061010083398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b606e806100926000396000f3fe608060405260043610601c5760003560e01c80639e5faafc146021575b600080fd5b60276029565b005b6000546001600160a01b031680fffea2646970667358221220a65e99e05d05fab83069a67b3d9d78455f2595dd3a276174e499faaaa174c4f064736f6c634300080d0033";

type DestructAttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DestructAttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DestructAttack__factory extends ContractFactory {
  constructor(...args: DestructAttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "DestructAttack";
  }

  deploy(
    _etherGame: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DestructAttack> {
    return super.deploy(_etherGame, overrides || {}) as Promise<DestructAttack>;
  }
  getDeployTransaction(
    _etherGame: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_etherGame, overrides || {});
  }
  attach(address: string): DestructAttack {
    return super.attach(address) as DestructAttack;
  }
  connect(signer: Signer): DestructAttack__factory {
    return super.connect(signer) as DestructAttack__factory;
  }
  static readonly contractName: "DestructAttack";
  public readonly contractName: "DestructAttack";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DestructAttackInterface {
    return new utils.Interface(_abi) as DestructAttackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DestructAttack {
    return new Contract(address, _abi, signerOrProvider) as DestructAttack;
  }
}
