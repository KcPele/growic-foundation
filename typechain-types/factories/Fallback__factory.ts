/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Fallback, FallbackInterface } from "../Fallback";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "func",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "Log",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "add",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610133806100206000396000f3fe60806040526004361060295760003560e01c806312065fe01460dc5780634f2be91f1460fb576089565b366089577fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b55a604051607f91906040808252600790820152667265636569766560c81b6060820152602081019190915260800190565b60405180910390a1005b7fdd970dd9b5bfe707922155b058a407655cb18288b807e2216442bca8ad83d6b55a604051607f919060408082526008908201526766616c6c6261636b60c01b6060820152602081019190915260800190565b34801560e757600080fd5b504760405190815260200160405180910390f35b00fea2646970667358221220143f73ec77cea01d11a85bb9fc182c668e197753af7a66403bf432a17e461f5664736f6c63430008090033";

type FallbackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FallbackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Fallback__factory extends ContractFactory {
  constructor(...args: FallbackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Fallback";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Fallback> {
    return super.deploy(overrides || {}) as Promise<Fallback>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Fallback {
    return super.attach(address) as Fallback;
  }
  connect(signer: Signer): Fallback__factory {
    return super.connect(signer) as Fallback__factory;
  }
  static readonly contractName: "Fallback";
  public readonly contractName: "Fallback";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FallbackInterface {
    return new utils.Interface(_abi) as FallbackInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Fallback {
    return new Contract(address, _abi, signerOrProvider) as Fallback;
  }
}
