/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FakeNFT, FakeNFTInterface } from "../FakeNFT";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mint",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405260016006553480156200001657600080fd5b5060408051808201825260048082526346414b4560e01b602080840182815285518087019096529285528401528151919291620000569160009162000075565b5080516200006c90600190602084019062000075565b50505062000157565b82805462000083906200011b565b90600052602060002090601f016020900481019282620000a75760008555620000f2565b82601f10620000c257805160ff1916838001178555620000f2565b82800160010185558215620000f2579182015b82811115620000f2578251825591602001919060010190620000d5565b506200010092915062000104565b5090565b5b8082111562000100576000815560010162000105565b600181811c908216806200013057607f821691505b6020821081036200015157634e487b7160e01b600052602260045260246000fd5b50919050565b6113b480620001676000396000f3fe6080604052600436106100dd5760003560e01c80636352211e1161007f578063a22cb46511610059578063a22cb4651461023e578063b88d4fde1461025e578063c87b56dd1461027e578063e985e9c51461029e57600080fd5b80636352211e146101db57806370a08231146101fb57806395d89b411461022957600080fd5b8063095ea7b3116100bb578063095ea7b3146101715780631249c58b1461019357806323b872dd1461019b57806342842e0e146101bb57600080fd5b806301ffc9a7146100e257806306fdde0314610117578063081812fc14610139575b600080fd5b3480156100ee57600080fd5b506101026100fd366004610eca565b6102e7565b60405190151581526020015b60405180910390f35b34801561012357600080fd5b5061012c610339565b60405161010e9190610f3f565b34801561014557600080fd5b50610159610154366004610f52565b6103cb565b6040516001600160a01b03909116815260200161010e565b34801561017d57600080fd5b5061019161018c366004610f87565b6103f2565b005b61019161050c565b3480156101a757600080fd5b506101916101b6366004610fb1565b610588565b3480156101c757600080fd5b506101916101d6366004610fb1565b6105b9565b3480156101e757600080fd5b506101596101f6366004610f52565b6105d4565b34801561020757600080fd5b5061021b610216366004610fed565b610634565b60405190815260200161010e565b34801561023557600080fd5b5061012c6106ba565b34801561024a57600080fd5b50610191610259366004611008565b6106c9565b34801561026a57600080fd5b5061019161027936600461105a565b6106d8565b34801561028a57600080fd5b5061012c610299366004610f52565b610710565b3480156102aa57600080fd5b506101026102b9366004611136565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061031857506001600160e01b03198216635b5e139f60e01b145b8061033357506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461034890611169565b80601f016020809104026020016040519081016040528092919081815260200182805461037490611169565b80156103c15780601f10610396576101008083540402835291602001916103c1565b820191906000526020600020905b8154815290600101906020018083116103a457829003601f168201915b5050505050905090565b60006103d682610784565b506000908152600460205260409020546001600160a01b031690565b60006103fd826105d4565b9050806001600160a01b0316836001600160a01b03160361046f5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061048b575061048b81336102b9565b6104fd5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610466565b61050783836107e6565b505050565b66038d7ea4c6800034146105625760405162461bcd60e51b815260206004820152601760248201527f45746865722073656e7420697320696e636f72726563740000000000000000006044820152606401610466565b61056e33600654610854565b60016006600082825461058191906111b9565b9091555050565b6105923382610996565b6105ae5760405162461bcd60e51b8152600401610466906111d1565b610507838383610a15565b610507838383604051806020016040528060008152506106d8565b6000818152600260205260408120546001600160a01b0316806103335760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610466565b60006001600160a01b03821661069e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610466565b506001600160a01b031660009081526003602052604090205490565b60606001805461034890611169565b6106d4338383610bb1565b5050565b6106e23383610996565b6106fe5760405162461bcd60e51b8152600401610466906111d1565b61070a84848484610c7f565b50505050565b606061071b82610784565b600061073260408051602081019091526000815290565b90506000815111610752576040518060200160405280600081525061077d565b8061075c84610cb2565b60405160200161076d92919061121f565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166107e35760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610466565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061081b826105d4565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0382166108aa5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610466565b6000818152600260205260409020546001600160a01b03161561090f5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610466565b6001600160a01b03821660009081526003602052604081208054600192906109389084906111b9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000806109a2836105d4565b9050806001600160a01b0316846001600160a01b031614806109e957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80610a0d5750836001600160a01b0316610a02846103cb565b6001600160a01b0316145b949350505050565b826001600160a01b0316610a28826105d4565b6001600160a01b031614610a8c5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610466565b6001600160a01b038216610aee5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610466565b610af96000826107e6565b6001600160a01b0383166000908152600360205260408120805460019290610b2290849061124e565b90915550506001600160a01b0382166000908152600360205260408120805460019290610b509084906111b9565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b816001600160a01b0316836001600160a01b031603610c125760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610466565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610c8a848484610a15565b610c9684848484610db3565b61070a5760405162461bcd60e51b815260040161046690611265565b606081600003610cd95750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610d035780610ced816112b7565b9150610cfc9050600a836112e6565b9150610cdd565b60008167ffffffffffffffff811115610d1e57610d1e611044565b6040519080825280601f01601f191660200182016040528015610d48576020820181803683370190505b5090505b8415610a0d57610d5d60018361124e565b9150610d6a600a866112fa565b610d759060306111b9565b60f81b818381518110610d8a57610d8a61130e565b60200101906001600160f81b031916908160001a905350610dac600a866112e6565b9450610d4c565b60006001600160a01b0384163b15610ea957604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610df7903390899088908890600401611324565b6020604051808303816000875af1925050508015610e32575060408051601f3d908101601f19168201909252610e2f91810190611361565b60015b610e8f573d808015610e60576040519150601f19603f3d011682016040523d82523d6000602084013e610e65565b606091505b508051600003610e875760405162461bcd60e51b815260040161046690611265565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610a0d565b506001949350505050565b6001600160e01b0319811681146107e357600080fd5b600060208284031215610edc57600080fd5b813561077d81610eb4565b60005b83811015610f02578181015183820152602001610eea565b8381111561070a5750506000910152565b60008151808452610f2b816020860160208601610ee7565b601f01601f19169290920160200192915050565b60208152600061077d6020830184610f13565b600060208284031215610f6457600080fd5b5035919050565b80356001600160a01b0381168114610f8257600080fd5b919050565b60008060408385031215610f9a57600080fd5b610fa383610f6b565b946020939093013593505050565b600080600060608486031215610fc657600080fd5b610fcf84610f6b565b9250610fdd60208501610f6b565b9150604084013590509250925092565b600060208284031215610fff57600080fd5b61077d82610f6b565b6000806040838503121561101b57600080fd5b61102483610f6b565b91506020830135801515811461103957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561107057600080fd5b61107985610f6b565b935061108760208601610f6b565b925060408501359150606085013567ffffffffffffffff808211156110ab57600080fd5b818701915087601f8301126110bf57600080fd5b8135818111156110d1576110d1611044565b604051601f8201601f19908116603f011681019083821181831017156110f9576110f9611044565b816040528281528a602084870101111561111257600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561114957600080fd5b61115283610f6b565b915061116060208401610f6b565b90509250929050565b600181811c9082168061117d57607f821691505b60208210810361119d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156111cc576111cc6111a3565b500190565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b60008351611231818460208801610ee7565b835190830190611245818360208801610ee7565b01949350505050565b600082821015611260576112606111a3565b500390565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6000600182016112c9576112c96111a3565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826112f5576112f56112d0565b500490565b600082611309576113096112d0565b500690565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061135790830184610f13565b9695505050505050565b60006020828403121561137357600080fd5b815161077d81610eb456fea2646970667358221220e745304b89953e47fdf23c137352b6a340979d402a1337a1eef9846d609e03d664736f6c634300080d0033";

type FakeNFTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FakeNFTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FakeNFT__factory extends ContractFactory {
  constructor(...args: FakeNFTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FakeNFT";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FakeNFT> {
    return super.deploy(overrides || {}) as Promise<FakeNFT>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FakeNFT {
    return super.attach(address) as FakeNFT;
  }
  connect(signer: Signer): FakeNFT__factory {
    return super.connect(signer) as FakeNFT__factory;
  }
  static readonly contractName: "FakeNFT";
  public readonly contractName: "FakeNFT";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FakeNFTInterface {
    return new utils.Interface(_abi) as FakeNFTInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FakeNFT {
    return new Contract(address, _abi, signerOrProvider) as FakeNFT;
  }
}
