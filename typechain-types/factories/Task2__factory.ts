/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Task2, Task2Interface } from "../Task2";

const _abi = [
  {
    inputs: [],
    name: "checkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserDetail",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "age",
            type: "uint256",
          },
        ],
        internalType: "struct Task2.User",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_age",
        type: "uint256",
      },
    ],
    name: "setUserDetails",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061096c806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806308f6f76e146100515780638b326ec21461006d578063b6b55f251461008b578063c71daccb146100a7575b600080fd5b61006b60048036038101906100669190610692565b6100c5565b005b61007561020f565b60405161008291906107d7565b60405180910390f35b6100a560048036038101906100a091906107f9565b610385565b005b6100af610462565b6040516100bc9190610835565b60405180910390f35b6100f17f934212af6533230b2d064984c8df4ea0506cc06751b8a45728abc6c48deeca4060001b61052d565b61011d7f63dfb77671704c0d78256f9185cb23726ff5c4625083073aaaac083369ca09d460001b61052d565b6101497f59643cb9c43972fedcb7d62966021941f779bc1619512fff075f84547d7ad5be60001b61052d565b604051806040016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001828152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906101fc929190610530565b5060208201518160010155905050505050565b6102176105b6565b6102437f2b9300e379db0057a9c5792b9cc69d4c1d2273da152f20e3a71a600246a2873c60001b61052d565b61026f7f2b325f01288b12fb8a1f9b232dbf26157feb424d23a6b28beb187a8da72b2efb60001b61052d565b61029b7fc7e010793384fad7d343b98651c12ff11ff1de6e448d3f72539435db345019bd60001b61052d565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060400160405290816000820180546102f49061087f565b80601f01602080910402602001604051908101604052809291908181526020018280546103209061087f565b801561036d5780601f106103425761010080835404028352916020019161036d565b820191906000526020600020905b81548152906001019060200180831161035057829003601f168201915b50505050508152602001600182015481525050905090565b6103b17fa3fe467dace47615c41dba616f6419d0a3eb852c92c15dde90adb993160e89cd60001b61052d565b6103dd7f1b2f0b2fc0a33837d1e73fedd2aae89c26caca166698ed0c47113b2804a2a61e60001b61052d565b6104097f34a308e51f8a29e8193b987f6c1e03fc6276bdec6a2e81ffb6e5c64c7569f1dd60001b61052d565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461045891906108e0565b9250508190555050565b60006104907f67fdeafb75f1d732f6e67648d0d76be89b3319c936676d02f25a9e050da6852360001b61052d565b6104bc7f64082ff5f1a02e49c86287cdee26b559f58f9a091259b758202c6ce21bd773fe60001b61052d565b6104e87ff2f795a3312a62f1c7492e3ab181c8caece4c3b038e0fc486412a019f0fc2ddb60001b61052d565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b50565b82805461053c9061087f565b90600052602060002090601f01602090048101928261055e57600085556105a5565b82601f1061057757805160ff19168380011785556105a5565b828001600101855582156105a5579182015b828111156105a4578251825591602001919060010190610589565b5b5090506105b291906105d0565b5090565b604051806040016040528060608152602001600081525090565b5b808211156105e95760008160009055506001016105d1565b5090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261061c5761061b6105f7565b5b8235905067ffffffffffffffff811115610639576106386105fc565b5b60208301915083600182028301111561065557610654610601565b5b9250929050565b6000819050919050565b61066f8161065c565b811461067a57600080fd5b50565b60008135905061068c81610666565b92915050565b6000806000604084860312156106ab576106aa6105ed565b5b600084013567ffffffffffffffff8111156106c9576106c86105f2565b5b6106d586828701610606565b935093505060206106e88682870161067d565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561072c578082015181840152602081019050610711565b8381111561073b576000848401525b50505050565b6000601f19601f8301169050919050565b600061075d826106f2565b61076781856106fd565b935061077781856020860161070e565b61078081610741565b840191505092915050565b6107948161065c565b82525050565b600060408301600083015184820360008601526107b78282610752565b91505060208301516107cc602086018261078b565b508091505092915050565b600060208201905081810360008301526107f1818461079a565b905092915050565b60006020828403121561080f5761080e6105ed565b5b600061081d8482850161067d565b91505092915050565b61082f8161065c565b82525050565b600060208201905061084a6000830184610826565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061089757607f821691505b602082108114156108ab576108aa610850565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108eb8261065c565b91506108f68361065c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561092b5761092a6108b1565b5b82820190509291505056fea264697066735822122085f1efa581493070e53d958271b87dd9892c9793e4081096ff4e8da9aff78b6364736f6c63430008090033";

type Task2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Task2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Task2__factory extends ContractFactory {
  constructor(...args: Task2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Task2";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Task2> {
    return super.deploy(overrides || {}) as Promise<Task2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Task2 {
    return super.attach(address) as Task2;
  }
  connect(signer: Signer): Task2__factory {
    return super.connect(signer) as Task2__factory;
  }
  static readonly contractName: "Task2";
  public readonly contractName: "Task2";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Task2Interface {
    return new utils.Interface(_abi) as Task2Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Task2 {
    return new Contract(address, _abi, signerOrProvider) as Task2;
  }
}
