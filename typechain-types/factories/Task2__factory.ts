/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Task2, Task2Interface } from "../Task2";

const _abi = [
  {
    inputs: [],
    name: "checkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserDetail",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "age",
            type: "uint256",
          },
        ],
        internalType: "struct Task2.User",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_age",
        type: "uint256",
      },
    ],
    name: "setUserDetails",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610448806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806308f6f76e146100515780638b326ec214610066578063b6b55f2514610084578063c71daccb14610097575b600080fd5b61006461005f3660046102ba565b6100b5565b005b61006e61012c565b60405161007b9190610332565b60405180910390f35b610064610092366004610398565b6101fa565b3360009081526001602052604090205460405190815260200161007b565b6040805160606020601f86018190040282018101835291810184815290918291908690869081908501838280828437600092018290525093855250505060209182018490523381528082526040902082518051919261011992849290910190610221565b5060208201518160010155905050505050565b60408051808201909152606081526000602082015233600090815260208190526040908190208151808301909252805482908290610169906103b1565b80601f0160208091040260200160405190810160405280929190818152602001828054610195906103b1565b80156101e25780601f106101b7576101008083540402835291602001916101e2565b820191906000526020600020905b8154815290600101906020018083116101c557829003601f168201915b50505050508152602001600182015481525050905090565b33600090815260016020526040812080548392906102199084906103ec565b909155505050565b82805461022d906103b1565b90600052602060002090601f01602090048101928261024f5760008555610295565b82601f1061026857805160ff1916838001178555610295565b82800160010185558215610295579182015b8281111561029557825182559160200191906001019061027a565b506102a19291506102a5565b5090565b5b808211156102a157600081556001016102a6565b6000806000604084860312156102cf57600080fd5b833567ffffffffffffffff808211156102e757600080fd5b818601915086601f8301126102fb57600080fd5b81358181111561030a57600080fd5b87602082850101111561031c57600080fd5b6020928301989097509590910135949350505050565b600060208083528351604082850152805180606086015260005b818110156103685782810184015186820160800152830161034c565b8181111561037a576000608083880101525b50949091015160408401525050601f91909101601f19160160800190565b6000602082840312156103aa57600080fd5b5035919050565b600181811c908216806103c557607f821691505b602082108114156103e657634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561040d57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220073e23fd734444a590b40034ffd59a669fd1563dba12af79d1e6c4c77c8a02f264736f6c63430008090033";

type Task2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Task2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Task2__factory extends ContractFactory {
  constructor(...args: Task2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Task2";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Task2> {
    return super.deploy(overrides || {}) as Promise<Task2>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Task2 {
    return super.attach(address) as Task2;
  }
  connect(signer: Signer): Task2__factory {
    return super.connect(signer) as Task2__factory;
  }
  static readonly contractName: "Task2";
  public readonly contractName: "Task2";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Task2Interface {
    return new utils.Interface(_abi) as Task2Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Task2 {
    return new Contract(address, _abi, signerOrProvider) as Task2;
  }
}
