/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Task1, Task1Interface } from "../Task1";

const _abi = [
  {
    inputs: [],
    name: "checkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610102806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063b6b55f25146037578063c71daccb146048575b600080fd5b60466042366004608f565b606a565b005b3360009081526020819052604090205460405190815260200160405180910390f35b3360009081526020819052604081208054839290608790849060a7565b909155505050565b60006020828403121560a057600080fd5b5035919050565b6000821982111560c757634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220592ab31714e4db665f67ad4b2ccb2c82f57c31ed28c1e9e5ac0e53bdfca3e49164736f6c63430008090033";

type Task1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Task1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Task1__factory extends ContractFactory {
  constructor(...args: Task1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Task1";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Task1> {
    return super.deploy(overrides || {}) as Promise<Task1>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Task1 {
    return super.attach(address) as Task1;
  }
  connect(signer: Signer): Task1__factory {
    return super.connect(signer) as Task1__factory;
  }
  static readonly contractName: "Task1";
  public readonly contractName: "Task1";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Task1Interface {
    return new utils.Interface(_abi) as Task1Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Task1 {
    return new Contract(address, _abi, signerOrProvider) as Task1;
  }
}
