/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Task3, Task3Interface } from "../Task3";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "AmountToSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "HasNotdeposited",
    type: "error",
  },
  {
    inputs: [],
    name: "NotcontractOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "addFund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "checkBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getUserDetail",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "age",
            type: "uint256",
          },
        ],
        internalType: "struct Task3.User",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_age",
        type: "uint256",
      },
    ],
    name: "setUserDetails",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b506100437fadff284e5851d0195f693a1840ae31bfb3907a718d40df09637c30ad627c323b60001b6100e060201b60201c565b6100757f03373b7e7a42df428b2c7da96426761af36c20118350a133004c8aa1dccf037f60001b6100e060201b60201c565b6100a77fd4d97c317b24cd05969f106f6173e09f9b014a28dc12497c1e9093057bcebf7e60001b6100e060201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506100e3565b50565b60805161127f6101056000396000818161071f0152610b43015261127f6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80638b326ec21161005b5780638b326ec2146100c45780638da5cb5b146100e2578063b6b55f2514610100578063c71daccb1461011c5761007d565b806308f6f76e14610082578063346c96e91461009e5780633ccfd60b146100ba575b600080fd5b61009c60048036038101906100979190610e72565b61013a565b005b6100b860048036038101906100b39190610ed2565b610284565b005b6100c2610699565b005b6100cc6109cb565b6040516100d99190610fe4565b60405180910390f35b6100ea610b41565b6040516100f79190611047565b60405180910390f35b61011a60048036038101906101159190610ed2565b610b65565b005b610124610c42565b6040516101319190611071565b60405180910390f35b6101667f06e07009580840ec15baed1e65030d138b5c6fa3a761f4fdbda7c1a14d9db0dc60001b610d0d565b6101927f1a52a0a5ab05d70dd2ac8480cc3752d2c6f588898d3cd99ccd1b4175e6ff027260001b610d0d565b6101be7fc7403304433d038f8c02c878dcd06b7c302c89d6cfa193caa40b84c4ece4744260001b610d0d565b604051806040016040528084848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001828152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610271929190610d10565b5060208201518160010155905050505050565b6102b07fd7dafec9a28f60b4085bcd507ac17e920c569754898f0e4f5f0aac11fd74c68260001b610d0d565b6102dc7f9c12231a723718019c9978504ebb264f9d85ef765ce1194f3c8e324afe38096260001b610d0d565b6103087fb770f583df9172e51d8f54fea2f2ff809bf1ab2dd3b5a4acc74402ff3f5ef29b60001b610d0d565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116103e25761037b7f59083924c50596c4c57611ee4a92b22f0fdeb5b1c6954c7e7a8e354fbecc77e460001b610d0d565b6103a77fdd35d767edb118b7846d8eafae87eb03a1f8fd2e060cc59571fdf69e2e07e72960001b610d0d565b6040517ff68174ce0000000000000000000000000000000000000000000000000000000081526004016103d99061110f565b60405180910390fd5b61040e7fc8271d9021c96fa62f4e6c662aed281c6f48bfee58f297cd0157d39487468e4360001b610d0d565b61043a7f67d62bcfb8e24d64c33a1787a5ec86d0f70e82fb5f4496b577381bc535c6c2f660001b610d0d565b806104677ff22401229999c624515625b8d9f8370bc15919e38444f3ac62e004b33dec152e60001b610d0d565b6104937fa3529464f793a2ebc865613b18c71431edfc20d5434e236ba06ee3df1819b14960001b610d0d565b6104bf7fc16f99499131d5c5d6f94fc70020f6f13527757ba66aaa2a33068dc0e617cbdc60001b610d0d565b662386f26fc10000811015610563576104fa7f53780342c77f9ded9af018422555b09920b159e2ef2a7f7db3d7887d01e4e3e360001b610d0d565b6105267f046b87cb649816fbcb191a99a9f59ff2fe418a522a0e402b8348edbb0cb4446d60001b610d0d565b806040517fa1280b4b00000000000000000000000000000000000000000000000000000000815260040161055a9190611071565b60405180910390fd5b61058f7fd615fb63532fef1638f6260537fa40c133cb9b9fb5514290e353f2e53112d97160001b610d0d565b6105bb7f5a37e4ce3aa0589f15cadfefe5d3e7a0b48b429017663aa691cb1224d65bb4ab60001b610d0d565b6105e77f55edf6eba280b2db574f0b9625acba4e0d055f744de7b856f051f4410e92f94a60001b610d0d565b6106137f93c37fc1e8b6a20b6099fc634e7ab0e868832b002dfb93a2b8fa133697a6037960001b610d0d565b61063f7fcd852fb27c806b944f3bbcb6a4de97134355b5179633e9c55a2b675201698daa60001b610d0d565b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461068e919061115e565b925050819055505050565b6106c57fa07dec237976cafe9bc18a165f38d9b6d75aed51039033c9e841aa7859679d5260001b610d0d565b6106f17f3d9354d56ad97e772186f5204df1594832c05ebf1541276f0d6c8c4191aa26fc60001b610d0d565b61071d7fb4a8f2ad31f4cd3f4d62fe94ceb64832fad48b53dd5f5ba8036091ccc64f612360001b610d0d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107fa5761079c7fb8872fa9192404ee91c96305e2f173c1493269cf96c9321f2cf34adf7c6269ff60001b610d0d565b6107c87f39ccf42bfe35c4dce685ed251abcd4dc396302b01feec09e5b7e25d33c40aafb60001b610d0d565b6040517f36fca8d700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108267f0d0be797a4edcc5634739812af89a8a94982e7a9098901823607dbfda533fe5060001b610d0d565b6108527f4da1da79edffd982df795f7a97a429a67ece5841b5088aa7defda2a921f3d72160001b610d0d565b61087e7f2600b7a91eb9d224943fa54d47d29f487781ae2dd2a7425d1e3efdd762ca013560001b610d0d565b6108aa7f26e302af78b1781bffabacf61f6ff9bfb2b028f13ba1b66bcdd81b89fa48adf860001b610d0d565b6108d67f3cedaa0bee5822df829e7099e794d82893afaa0691ba1a521825c6b6038a1f6160001b610d0d565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506109467f97af1524ae317113ac2c378d1e37368daf8de687f7503f4f63424fbcec8c9f1b60001b610d0d565b6109727f54a73645c14ad1c985b88d66608c06b99968e9a0a16c29d7122c827f59ffc6fb60001b610d0d565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109c191906111b4565b9250508190555050565b6109d3610d96565b6109ff7faf029713681ef4584a8842af878e3539e9a19480e9d0eff4a782d8726d2fa03860001b610d0d565b610a2b7f23a59f23878313c4a129743604e45bd0af14e662b4b4cbe6de735d0862fb0eb760001b610d0d565b610a577f19e176127eee99b6a5dd99ad5c1653f1b79a0a9f3768d2a966c5b0395b1ee12f60001b610d0d565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806040016040529081600082018054610ab090611217565b80601f0160208091040260200160405190810160405280929190818152602001828054610adc90611217565b8015610b295780601f10610afe57610100808354040283529160200191610b29565b820191906000526020600020905b815481529060010190602001808311610b0c57829003601f168201915b50505050508152602001600182015481525050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b610b917f05a0b6848a7850ee9daa035422144d400e365b6998f01782338e99c55d2c517760001b610d0d565b610bbd7f30aa7fe814c6ab52fc6e49371ed3188277f5a0b1a5b312390a2d6856db53b4eb60001b610d0d565b610be97fec1bd07ee0f62a8ead4e6bb6e4fc50bcb6f0a3e7fd1799d87880814ba44b93ae60001b610d0d565b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c38919061115e565b9250508190555050565b6000610c707f6290775c0f107f4fd57b1137cb972f14b9b0775f5a3e16cd40e368dc4d5e4f3560001b610d0d565b610c9c7fab2dec970f854553bc8c1f3a8aff05a7af495d5574597e477978cd0e0504bc2860001b610d0d565b610cc87f0a116c57375062e333c52ba221c397f7bb7388fac983c4275ad585d213a57e1960001b610d0d565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b50565b828054610d1c90611217565b90600052602060002090601f016020900481019282610d3e5760008555610d85565b82601f10610d5757805160ff1916838001178555610d85565b82800160010185558215610d85579182015b82811115610d84578251825591602001919060010190610d69565b5b509050610d929190610db0565b5090565b604051806040016040528060608152602001600081525090565b5b80821115610dc9576000816000905550600101610db1565b5090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112610dfc57610dfb610dd7565b5b8235905067ffffffffffffffff811115610e1957610e18610ddc565b5b602083019150836001820283011115610e3557610e34610de1565b5b9250929050565b6000819050919050565b610e4f81610e3c565b8114610e5a57600080fd5b50565b600081359050610e6c81610e46565b92915050565b600080600060408486031215610e8b57610e8a610dcd565b5b600084013567ffffffffffffffff811115610ea957610ea8610dd2565b5b610eb586828701610de6565b93509350506020610ec886828701610e5d565b9150509250925092565b600060208284031215610ee857610ee7610dcd565b5b6000610ef684828501610e5d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610f39578082015181840152602081019050610f1e565b83811115610f48576000848401525b50505050565b6000601f19601f8301169050919050565b6000610f6a82610eff565b610f748185610f0a565b9350610f84818560208601610f1b565b610f8d81610f4e565b840191505092915050565b610fa181610e3c565b82525050565b60006040830160008301518482036000860152610fc48282610f5f565b9150506020830151610fd96020860182610f98565b508091505092915050565b60006020820190508181036000830152610ffe8184610fa7565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061103182611006565b9050919050565b61104181611026565b82525050565b600060208201905061105c6000830184611038565b92915050565b61106b81610e3c565b82525050565b60006020820190506110866000830184611062565b92915050565b600082825260208201905092915050565b7f506c6561736520796f75206d757374206465706f73697420666972737420757360008201527f696e6720746865206465706f7369742066756e63696f6e000000000000000000602082015250565b60006110f960378361108c565b91506111048261109d565b604082019050919050565b60006020820190508181036000830152611128816110ec565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061116982610e3c565b915061117483610e3c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111a9576111a861112f565b5b828201905092915050565b60006111bf82610e3c565b91506111ca83610e3c565b9250828210156111dd576111dc61112f565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061122f57607f821691505b60208210811415611243576112426111e8565b5b5091905056fea2646970667358221220e2fff6fc4dcccff2a857d7066eadf5e6f444bdce666eccfa39d4a57c1dd47bf264736f6c63430008090033";

type Task3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Task3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Task3__factory extends ContractFactory {
  constructor(...args: Task3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Task3";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Task3> {
    return super.deploy(overrides || {}) as Promise<Task3>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Task3 {
    return super.attach(address) as Task3;
  }
  connect(signer: Signer): Task3__factory {
    return super.connect(signer) as Task3__factory;
  }
  static readonly contractName: "Task3";
  public readonly contractName: "Task3";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Task3Interface {
    return new utils.Interface(_abi) as Task3Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Task3 {
    return new Contract(address, _abi, signerOrProvider) as Task3;
  }
}
