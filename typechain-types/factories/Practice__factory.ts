/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Practice, PracticeInterface } from "../Practice";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "msgSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60a0604052348015600f57600080fd5b5033608052608051607660296000396000505060766000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063d737d0c714602d575b600080fd5b6040805133815290519081900360200190f3fea26469706673582212200cd64bf9362665a217a78085a2d213fc5a2c006c674b52cac44dfc9301a9c4d364736f6c63430008090033";

type PracticeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PracticeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Practice__factory extends ContractFactory {
  constructor(...args: PracticeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Practice";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Practice> {
    return super.deploy(overrides || {}) as Promise<Practice>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Practice {
    return super.attach(address) as Practice;
  }
  connect(signer: Signer): Practice__factory {
    return super.connect(signer) as Practice__factory;
  }
  static readonly contractName: "Practice";
  public readonly contractName: "Practice";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PracticeInterface {
    return new utils.Interface(_abi) as PracticeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Practice {
    return new Contract(address, _abi, signerOrProvider) as Practice;
  }
}
