/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Box, BoxInterface } from "../Box";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "ValueChanged",
    type: "event",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "retrieve",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "store",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6107278061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780636057361d1461007a578063715018a6146100965780638da5cb5b146100a0578063f2fde38b146100be575b600080fd5b6100646100da565b60405161007191906104b4565b60405180910390f35b610094600480360381019061008f9190610500565b610168565b005b61009e61028d565b005b6100a86102a1565b6040516100b5919061056e565b60405180910390f35b6100d860048036038101906100d391906105b5565b6102ca565b005b60006101087f5e0ce14fe1553b3918e1d242f926b59156239920a88ade3ab8c4e3b9abb8ad2960001b61034e565b6101347f6f6dd3b3d12aeb68c0ae2736588b7d45368390c7201e7c861440217f9d1bba5960001b61034e565b6101607f0ddf2629cf727b670cfd77193bae9ee9be5bf101f93c873a5ac1abddc2728ed660001b61034e565b600154905090565b610170610351565b61019c7fe5adba6a732a8ec5b408e02ed2dcae75360b0586931e7dda4e0ea362457ca83a60001b61034e565b6101c87ffb18128af554542c7ab4766a0c89deb0d96a1221b2fd3d95dd55bf844164295660001b61034e565b6101f47f13a0b66f4049b0a9b554c41b47dfeb858095b9afd3ad027a02163d604b4ca7d560001b61034e565b806001819055506102277faf3e33a5d85a72798221f7d86c3cd8fe6f3b7816c82c42ba0a12618c617692ed60001b61034e565b6102537f7687d9196fa9016bfa80ae3006c36a513c4b845ecef27b4ce5c8f0335afe1e2a60001b61034e565b7f93fe6d397c74fdf1402a8b72e47b68512f0510d7b98a4bc4cbdf6ac7108b3c598160405161028291906104b4565b60405180910390a150565b610295610351565b61029f60006103cf565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102d2610351565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033990610665565b60405180910390fd5b61034b816103cf565b50565b50565b610359610493565b73ffffffffffffffffffffffffffffffffffffffff166103776102a1565b73ffffffffffffffffffffffffffffffffffffffff16146103cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103c4906106d1565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6000819050919050565b6104ae8161049b565b82525050565b60006020820190506104c960008301846104a5565b92915050565b600080fd5b6104dd8161049b565b81146104e857600080fd5b50565b6000813590506104fa816104d4565b92915050565b600060208284031215610516576105156104cf565b5b6000610524848285016104eb565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105588261052d565b9050919050565b6105688161054d565b82525050565b6000602082019050610583600083018461055f565b92915050565b6105928161054d565b811461059d57600080fd5b50565b6000813590506105af81610589565b92915050565b6000602082840312156105cb576105ca6104cf565b5b60006105d9848285016105a0565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061064f6026836105e2565b915061065a826105f3565b604082019050919050565b6000602082019050818103600083015261067e81610642565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006106bb6020836105e2565b91506106c682610685565b602082019050919050565b600060208201905081810360008301526106ea816106ae565b905091905056fea2646970667358221220f5d9d206e504004f9c9ae4528ac3f6f0c968cc5b0edf0cbdbe32ec7d5bd3f0a764736f6c63430008090033";

type BoxConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BoxConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Box__factory extends ContractFactory {
  constructor(...args: BoxConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Box";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Box> {
    return super.deploy(overrides || {}) as Promise<Box>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Box {
    return super.attach(address) as Box;
  }
  connect(signer: Signer): Box__factory {
    return super.connect(signer) as Box__factory;
  }
  static readonly contractName: "Box";
  public readonly contractName: "Box";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BoxInterface {
    return new utils.Interface(_abi) as BoxInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Box {
    return new Contract(address, _abi, signerOrProvider) as Box;
  }
}
